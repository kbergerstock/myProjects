; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30133.0 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	??0tBitArray@@QEAA@XZ				; tBitArray::tBitArray
PUBLIC	?init@tBitArray@@QEAAXI@Z			; tBitArray::init
PUBLIC	?empty@tBitArray@@QEAAXXZ			; tBitArray::empty
PUBLIC	?count@tBitArray@@QEAAII@Z			; tBitArray::count
PUBLIC	?count@tBitArray@@QEAAIII@Z			; tBitArray::count
PUBLIC	?sieve@tBitArray@@QEAAHII@Z			; tBitArray::sieve
PUBLIC	_TI2PEAD
PUBLIC	_CTA2PEAD
PUBLIC	??_R0PEAD@8					; char * `RTTI Type Descriptor'
PUBLIC	_CT??_R0PEAD@88
PUBLIC	??_R0PEAX@8					; void * `RTTI Type Descriptor'
PUBLIC	_CT??_R0PEAX@88
PUBLIC	??_C@_0BI@CLLIGLLN@MEMORY?5ALLOCATION?5ERROR@	; `string'
PUBLIC	??_C@_0BA@LFCAGDJK@empty?5bit?5array@		; `string'
EXTRN	??_U@YAPEAX_K@Z:PROC				; operator new[]
EXTRN	??_V@YAXPEAX@Z:PROC				; operator delete[]
EXTRN	_CxxThrowException:PROC
EXTRN	__CxxFrameHandler4:PROC
EXTRN	memset:PROC
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
;	COMDAT pdata
pdata	SEGMENT
$pdata$?init@tBitArray@@QEAAXI@Z DD imagerel $LN11
	DD	imagerel $LN11+58
	DD	imagerel $unwind$?init@tBitArray@@QEAAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0??init@tBitArray@@QEAAXI@Z@4HA DD imagerel ?catch$0@?0??init@tBitArray@@QEAAXI@Z@4HA
	DD	imagerel ?catch$0@?0??init@tBitArray@@QEAAXI@Z@4HA+59
	DD	imagerel $unwind$?catch$0@?0??init@tBitArray@@QEAAXI@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?empty@tBitArray@@QEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+37
	DD	imagerel $unwind$?empty@tBitArray@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?sieve@tBitArray@@QEAAHII@Z DD imagerel $LN54
	DD	imagerel $LN54+277
	DD	imagerel $unwind$?sieve@tBitArray@@QEAAHII@Z
pdata	ENDS
;	COMDAT ??_C@_0BA@LFCAGDJK@empty?5bit?5array@
CONST	SEGMENT
??_C@_0BA@LFCAGDJK@empty?5bit?5array@ DB 'empty bit array', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CLLIGLLN@MEMORY?5ALLOCATION?5ERROR@
CONST	SEGMENT
??_C@_0BI@CLLIGLLN@MEMORY?5ALLOCATION?5ERROR@ DB 'MEMORY ALLOCATION ERROR'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT _CT??_R0PEAX@88
xdata$x	SEGMENT
_CT??_R0PEAX@88 DD 01H
	DD	imagerel ??_R0PEAX@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	08H
	DD	00H
xdata$x	ENDS
;	COMDAT ??_R0PEAX@8
data$r	SEGMENT
??_R0PEAX@8 DQ	FLAT:??_7type_info@@6B@			; void * `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.PEAX', 00H
data$r	ENDS
;	COMDAT _CT??_R0PEAD@88
xdata$x	SEGMENT
_CT??_R0PEAD@88 DD 01H
	DD	imagerel ??_R0PEAD@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	08H
	DD	00H
xdata$x	ENDS
;	COMDAT ??_R0PEAD@8
data$r	SEGMENT
??_R0PEAD@8 DQ	FLAT:??_7type_info@@6B@			; char * `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.PEAD', 00H
data$r	ENDS
;	COMDAT _CTA2PEAD
xdata$x	SEGMENT
_CTA2PEAD DD	02H
	DD	imagerel _CT??_R0PEAD@88
	DD	imagerel _CT??_R0PEAX@88
xdata$x	ENDS
;	COMDAT _TI2PEAD
xdata$x	SEGMENT
_TI2PEAD DD	00H
	DD	00H
	DD	00H
	DD	imagerel _CTA2PEAD
xdata$x	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?sieve@tBitArray@@QEAAHII@Z DD 081401H
	DD	096414H
	DD	085414H
	DD	073414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?empty@tBitArray@@QEAAXXZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0??init@tBitArray@@QEAAXI@Z@4HA DD 020a01H
	DD	05006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?init@tBitArray@@QEAAXI@Z DB 02H
	DB	':'
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$?init@tBitArray@@QEAAXI@Z DB 02H
	DB	01H
	DB	080H
	DD	imagerel ?catch$0@?0??init@tBitArray@@QEAAXI@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$?init@tBitArray@@QEAAXI@Z DB 02H
	DB	00H
	DB	00H
	DB	02H
	DD	imagerel $handlerMap$?init@tBitArray@@QEAAXI@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?init@tBitArray@@QEAAXI@Z DB 04H
	DB	08H
	DB	010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?init@tBitArray@@QEAAXI@Z DB 038H
	DD	imagerel $stateUnwindMap$?init@tBitArray@@QEAAXI@Z
	DD	imagerel $tryMap$?init@tBitArray@@QEAAXI@Z
	DD	imagerel $ip2state$?init@tBitArray@@QEAAXI@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?init@tBitArray@@QEAAXI@Z DD 020a19H
	DD	03006520aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?init@tBitArray@@QEAAXI@Z
xdata	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?sieve@tBitArray@@QEAAHII@Z
_TEXT	SEGMENT
$T1 = 48
this$ = 48
nl$ = 56
prime_limit$ = 64
?sieve@tBitArray@@QEAAHII@Z PROC			; tBitArray::sieve, COMDAT
; File D:\myProjects\projects.cpp\sieve\src\tbitarray.cpp
; Line 59
$LN54:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
; Line 62
	cmp	QWORD PTR [rcx+8], 0
	mov	ebx, 1
	mov	esi, ebx
	mov	ebp, r8d
	mov	r10d, edx
	mov	rdi, rcx
	je	$LN8@sieve
; Line 65
	mov	r9d, ebx
	cmp	edx, ebx
	jbe	$LN51@sieve
	npad	6
$LL4@sieve:
; File D:\myProjects\projects.cpp\sieve\headers\tBitArray.h
; Line 34
	mov	r8, QWORD PTR [rdi+8]
; Line 22
	mov	ecx, r9d
	and	ecx, 7
; Line 20
	mov	eax, r9d
	shr	rax, 3
; Line 22
	mov	edx, ebx
	shl	dl, cl
; Line 34
	test	dl, BYTE PTR [rax+r8]
; File D:\myProjects\projects.cpp\sieve\src\tbitarray.cpp
; Line 68
	jne	SHORT $LN2@sieve
; Line 73
	lea	r11d, DWORD PTR [r9*2+1]
	inc	esi
	mov	eax, r11d
	imul	eax, r11d
; Line 77
	cmp	eax, ebp
	jae	SHORT $LN11@sieve
; Line 81
	dec	eax
	shr	eax, 1
	cmp	eax, r10d
	jae	SHORT $LN2@sieve
	npad	7
$LL7@sieve:
; File D:\myProjects\projects.cpp\sieve\headers\tBitArray.h
; Line 20
	mov	r8d, eax
; Line 22
	mov	ecx, eax
; Line 20
	shr	r8, 3
; Line 22
	and	ecx, 7
; Line 35
	add	r8, QWORD PTR [rdi+8]
; File D:\myProjects\projects.cpp\sieve\src\tbitarray.cpp
; Line 81
	add	eax, r11d
; File D:\myProjects\projects.cpp\sieve\headers\tBitArray.h
; Line 35
	movzx	edx, BYTE PTR [r8]
	bts	edx, ecx
	mov	BYTE PTR [r8], dl
; File D:\myProjects\projects.cpp\sieve\src\tbitarray.cpp
; Line 81
	cmp	eax, r10d
	jb	SHORT $LL7@sieve
$LN2@sieve:
; Line 65
	inc	r9d
	cmp	r9d, r10d
	jb	SHORT $LL4@sieve
	jmp	SHORT $LN51@sieve
$LN11@sieve:
; Line 50
	xor	edx, edx
; Line 51
	test	r8, r8
	je	SHORT $LN28@sieve
; Line 52
	inc	r9d
	cmp	r9d, r10d
	jae	SHORT $LN28@sieve
; File D:\myProjects\projects.cpp\sieve\headers\tBitArray.h
; Line 34
	movzx	ecx, r9b
	rol	bl, cl
$LL29@sieve:
; Line 20
	mov	eax, r9d
	shr	rax, 3
; Line 34
	test	BYTE PTR [rax+r8], bl
; File D:\myProjects\projects.cpp\sieve\src\tbitarray.cpp
; Line 52
	lea	eax, DWORD PTR [rdx+1]
	cmovne	eax, edx
	inc	r9d
	rol	bl, 1
	mov	edx, eax
	cmp	r9d, r10d
	jb	SHORT $LL29@sieve
$LN28@sieve:
; Line 88
	add	esi, edx
$LN51@sieve:
; Line 100
	mov	rbx, QWORD PTR [rsp+56]
	mov	eax, esi
	mov	rsi, QWORD PTR [rsp+72]
	mov	rbp, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN8@sieve:
; Line 97
	lea	rax, OFFSET FLAT:??_C@_0BA@LFCAGDJK@empty?5bit?5array@
	lea	rdx, OFFSET FLAT:_TI2PEAD
	mov	QWORD PTR $T1[rsp], rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	_CxxThrowException
	int	3
$LN52@sieve:
?sieve@tBitArray@@QEAAHII@Z ENDP			; tBitArray::sieve
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?count@tBitArray@@QEAAIII@Z
_TEXT	SEGMENT
this$ = 8
nl$ = 16
ndx$ = 24
?count@tBitArray@@QEAAIII@Z PROC			; tBitArray::count, COMDAT
; File D:\myProjects\projects.cpp\sieve\src\tbitarray.cpp
; Line 51
	mov	r11, QWORD PTR [rcx+8]
	xor	r9d, r9d
	test	r11, r11
	je	SHORT $LN18@count
; Line 52
	lea	r10d, DWORD PTR [r8+1]
	cmp	r10d, edx
	jae	SHORT $LN18@count
; File D:\myProjects\projects.cpp\sieve\headers\tBitArray.h
; Line 34
	mov	r8d, 1
	movzx	ecx, r10b
	rol	r8b, cl
	npad	14
$LL4@count:
; Line 20
	mov	eax, r10d
; File D:\myProjects\projects.cpp\sieve\src\tbitarray.cpp
; Line 52
	lea	ecx, DWORD PTR [r9+1]
; File D:\myProjects\projects.cpp\sieve\headers\tBitArray.h
; Line 20
	shr	rax, 3
; Line 34
	test	BYTE PTR [rax+r11], r8b
; File D:\myProjects\projects.cpp\sieve\src\tbitarray.cpp
; Line 52
	cmovne	ecx, r9d
	inc	r10d
	rol	r8b, 1
	mov	r9d, ecx
	cmp	r10d, edx
	jb	SHORT $LL4@count
$LN18@count:
; Line 56
	mov	eax, r9d
	ret	0
?count@tBitArray@@QEAAIII@Z ENDP			; tBitArray::count
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?count@tBitArray@@QEAAII@Z
_TEXT	SEGMENT
this$ = 8
nl$ = 16
?count@tBitArray@@QEAAII@Z PROC				; tBitArray::count, COMDAT
; File D:\myProjects\projects.cpp\sieve\src\tbitarray.cpp
; Line 41
	mov	r10, QWORD PTR [rcx+8]
	mov	r8d, 1
	test	r10, r10
	je	SHORT $LN18@count
; Line 42
	cmp	edx, r8d
	jbe	SHORT $LN18@count
; File D:\myProjects\projects.cpp\sieve\headers\tBitArray.h
; Line 34
	mov	cl, 2
	mov	r9d, r8d
	dec	edx
	npad	5
$LL4@count:
; Line 20
	mov	rax, r9
	shr	rax, 3
; Line 34
	test	BYTE PTR [rax+r10], cl
; File D:\myProjects\projects.cpp\sieve\src\tbitarray.cpp
; Line 42
	lea	eax, DWORD PTR [r8+1]
	cmovne	eax, r8d
	inc	r9
	rol	cl, 1
	mov	r8d, eax
	sub	rdx, 1
	jne	SHORT $LL4@count
; Line 46
	ret	0
$LN18@count:
	mov	eax, r8d
	ret	0
?count@tBitArray@@QEAAII@Z ENDP				; tBitArray::count
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?empty@tBitArray@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?empty@tBitArray@@QEAAXXZ PROC				; tBitArray::empty, COMDAT
; File D:\myProjects\projects.cpp\sieve\src\tbitarray.cpp
; Line 31
$LN5:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
; Line 32
	mov	rcx, QWORD PTR [rcx+8]
	test	rcx, rcx
	je	SHORT $LN2@empty
; Line 33
	call	??_V@YAXPEAX@Z				; operator delete[]
; Line 34
	xor	eax, eax
	mov	QWORD PTR [rbx+8], rax
; Line 35
	mov	DWORD PTR [rbx], eax
$LN2@empty:
; Line 37
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?empty@tBitArray@@QEAAXXZ ENDP				; tBitArray::empty
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?init@tBitArray@@QEAAXI@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
nl$ = 72
?init@tBitArray@@QEAAXI@Z PROC				; tBitArray::init, COMDAT
; File D:\myProjects\projects.cpp\sieve\src\tbitarray.cpp
; Line 14
$LN11:
	mov	QWORD PTR [rsp+8], rcx
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
; Line 15
	cmp	QWORD PTR [rcx+8], 0
	jne	SHORT $LN7@init
; Line 17
	shr	edx, 3
	inc	edx
	mov	DWORD PTR [rcx], edx
; Line 19
	mov	ecx, edx
	call	??_U@YAPEAX_K@Z				; operator new[]
	mov	QWORD PTR [rbx+8], rax
; Line 21
	mov	r8d, DWORD PTR [rbx]
	xor	edx, edx
	mov	rcx, rax
	call	memset
	npad	1
$LN7@init:
; Line 29
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
$LN9@init:
?init@tBitArray@@QEAAXI@Z ENDP				; tBitArray::init
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
nl$ = 72
?catch$0@?0??init@tBitArray@@QEAAXI@Z@4HA PROC		; `tBitArray::init'::`1'::catch$0
; Line 23
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
__catch$?init@tBitArray@@QEAAXI@Z$0:
; Line 24
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
; Line 25
	mov	QWORD PTR [rax+8], 0
; Line 26
	lea	rax, OFFSET FLAT:??_C@_0BI@CLLIGLLN@MEMORY?5ALLOCATION?5ERROR@
	mov	QWORD PTR $T1[rbp], rax
	lea	rdx, OFFSET FLAT:_TI2PEAD
	lea	rcx, QWORD PTR $T1[rbp]
	call	_CxxThrowException
	npad	1
?catch$0@?0??init@tBitArray@@QEAAXI@Z@4HA ENDP		; `tBitArray::init'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
nl$ = 72
?catch$0@?0??init@tBitArray@@QEAAXI@Z@4HA PROC		; `tBitArray::init'::`1'::catch$0
; Line 23
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
__catch$?init@tBitArray@@QEAAXI@Z$0:
; Line 24
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
; Line 25
	mov	QWORD PTR [rax+8], 0
; Line 26
	lea	rax, OFFSET FLAT:??_C@_0BI@CLLIGLLN@MEMORY?5ALLOCATION?5ERROR@
	mov	QWORD PTR $T1[rbp], rax
	lea	rdx, OFFSET FLAT:_TI2PEAD
	lea	rcx, QWORD PTR $T1[rbp]
	call	_CxxThrowException
	npad	1
?catch$0@?0??init@tBitArray@@QEAAXI@Z@4HA ENDP		; `tBitArray::init'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0tBitArray@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0tBitArray@@QEAA@XZ PROC				; tBitArray::tBitArray, COMDAT
; File D:\myProjects\projects.cpp\sieve\src\tbitarray.cpp
; Line 10
	xor	eax, eax
	mov	DWORD PTR [rcx], eax
; Line 11
	mov	QWORD PTR [rcx+8], rax
; Line 12
	mov	rax, rcx
	ret	0
??0tBitArray@@QEAA@XZ ENDP				; tBitArray::tBitArray
_TEXT	ENDS
END
